# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import bvideo_pb2 as bvideo__pb2


class BvideoStub(object):
    """Bvideo
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckContent = channel.unary_unary(
                '/jijidown.core.Bvideo/CheckContent',
                request_serializer=bvideo__pb2.BvideoContentReq.SerializeToString,
                response_deserializer=bvideo__pb2.BvideoCheckContentReply.FromString,
                )
        self.Info = channel.unary_unary(
                '/jijidown.core.Bvideo/Info',
                request_serializer=bvideo__pb2.BvideoContentReq.SerializeToString,
                response_deserializer=bvideo__pb2.BvideoInfoReply.FromString,
                )
        self.AllQuality = channel.unary_unary(
                '/jijidown.core.Bvideo/AllQuality',
                request_serializer=bvideo__pb2.BvideoAllQualityReq.SerializeToString,
                response_deserializer=bvideo__pb2.BvideoAllQualityReply.FromString,
                )


class BvideoServicer(object):
    """Bvideo
    """

    def CheckContent(self, request, context):
        """效验输入的内容, 有效返回 BLinkResult
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """获取视频信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllQuality(self, request, context):
        """查找此视频所有支持的清晰度
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BvideoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckContent': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckContent,
                    request_deserializer=bvideo__pb2.BvideoContentReq.FromString,
                    response_serializer=bvideo__pb2.BvideoCheckContentReply.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=bvideo__pb2.BvideoContentReq.FromString,
                    response_serializer=bvideo__pb2.BvideoInfoReply.SerializeToString,
            ),
            'AllQuality': grpc.unary_unary_rpc_method_handler(
                    servicer.AllQuality,
                    request_deserializer=bvideo__pb2.BvideoAllQualityReq.FromString,
                    response_serializer=bvideo__pb2.BvideoAllQualityReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'jijidown.core.Bvideo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Bvideo(object):
    """Bvideo
    """

    @staticmethod
    def CheckContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jijidown.core.Bvideo/CheckContent',
            bvideo__pb2.BvideoContentReq.SerializeToString,
            bvideo__pb2.BvideoCheckContentReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jijidown.core.Bvideo/Info',
            bvideo__pb2.BvideoContentReq.SerializeToString,
            bvideo__pb2.BvideoInfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllQuality(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/jijidown.core.Bvideo/AllQuality',
            bvideo__pb2.BvideoAllQualityReq.SerializeToString,
            bvideo__pb2.BvideoAllQualityReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
